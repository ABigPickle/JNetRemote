#pragma once

#include <jni.h>

namespace JavaRemoteNative {
	namespace JavaDeclarations {
		using java_JNI_GetCreatedJavaVMs = jint(__stdcall*)(JavaVM**, jsize, jsize*);

		using java_GetEnv = jint(__stdcall*)(JavaVM*, void**, jint);
		using java_AttachCurrentThread = jint(__stdcall*)(JavaVM*, void**, void*);

		using java_GetVersion = jint(__stdcall*)(JNIEnv*);
		using java_FindClass = jclass(__stdcall*)(JNIEnv*, const char*);
		using java_FromReflectedMethod = jmethodID(__stdcall*)(JNIEnv*, jobject method);
		using java_FromReflectedField = jfieldID(__stdcall*)(JNIEnv*, jobject field);
		using java_ToReflectedMethod = jobject(__stdcall*)(JNIEnv*, jclass, jmethodID, jboolean);
		using java_GetSuperClass = jclass(__stdcall*)(JNIEnv*, jclass);
		using java_IsAssignableFrom = jboolean(__stdcall*)(JNIEnv*, jclass, jclass);
		using java_ToReflectedField = jobject(__stdcall*)(JNIEnv*, jclass, jfieldID, jboolean);
		using java_Throw = jint(_stdcall*)(JNIEnv*, jthrowable);
		using java_ThrowNew = jint(__stdcall*)(JNIEnv*, jclass, const char*);
		using java_ExceptionOccured = jthrowable(__stdcall*)(JNIEnv*);
		using java_ExceptionDescribe = void(__stdcall*)(JNIEnv*);
		using java_ExceptionClear = void(__stdcall*)(JNIEnv*);
		using java_FatalError = void(__stdcall*)(JNIEnv*, const char*);
		using java_PushLocalFrame = jint(__stdcall*)(JNIEnv*, jint);
		using java_PopLocalFrame = jobject(__stdcall*)(JNIEnv*, jobject);
		using java_NewGlobalRef = jobject(__stdcall*)(JNIEnv*, jobject);
		using java_DeleteGlobalRef = void(__stdcall*)(JNIEnv*, jobject);
		using java_DeleteLocalRef = void(__stdcall*)(JNIEnv*, jobject);
		using java_IsSameObject = jboolean(__stdcall*)(JNIEnv*, jobject, jobject);
		using java_NewLocalRef = jobject(__stdcall*)(JNIEnv*, jobject);
		using java_EnsureLocalCapacity = jint(__stdcall*)(JNIEnv*, jint);
		using java_AllocObject = jobject(__stdcall*)(JNIEnv*, jclass);
		using java_NewObjectA = jobject(__stdcall*)(JNIEnv*, jclass, jmethodID, const jvalue*);
		using java_GetObjectClass = jclass(__stdcall*)(JNIEnv*, jobject);
		using java_IsInstanceOf = jboolean(__stdcall*)(JNIEnv*, jobject, jclass);
		using java_GetMethodID = jmethodID(__stdcall*)(JNIEnv*, jclass, const char*, const char*);
		using java_CallObjectMethodA = jobject(__stdcall*)(JNIEnv*, jobject, jmethodID, const jvalue*);
		using java_CallBooleanMethodA = jboolean(__stdcall*)(JNIEnv*, jobject, jmethodID, const jvalue*);
		using java_CallByteMethodA = jbyte(__stdcall*)(JNIEnv*, jobject, jmethodID, const jvalue*);
		using java_CallCharMethodA = jchar(__stdcall*)(JNIEnv*, jobject, jmethodID, const jvalue*);
		using java_CallShortMethodA = jshort(__stdcall*)(JNIEnv*, jobject, jmethodID, const jvalue*);
		using java_CallIntMethodA = jint(__stdcall*)(JNIEnv*, jobject, jmethodID, const jvalue*);
		using java_CallLongMethodA = jlong(__stdcall*)(JNIEnv*, jobject, jmethodID, const jvalue*);
		using java_CallFloatMethodA = jfloat(__stdcall*)(JNIEnv*, jobject, jmethodID, const jvalue*);
		using java_CallDoubleMethodA = jdouble(__stdcall*)(JNIEnv*, jobject, jmethodID, const jvalue*);
		using java_CallVoidMethodA = void(__stdcall*)(JNIEnv*, jobject, jmethodID, const jvalue*);
		using java_CallNonvirtualObjectMethodA = jobject(__stdcall*)(JNIEnv*, jobject, jclass, jmethodID, const jvalue*);
		using java_CallNonvirtualBooleanMethodA = jboolean(__stdcall*)(JNIEnv*, jobject, jclass, jmethodID, const jvalue*);
		using java_CallNonvirtualByteMethodA = jbyte(__stdcall*)(JNIEnv*, jobject, jclass, jmethodID, const jvalue*);
		using java_CallNonvirtualCharMethodA = jchar(__stdcall*)(JNIEnv*, jobject, jclass, jmethodID, const jvalue*);
		using java_CallNonvirtualShortMethodA = jshort(__stdcall*)(JNIEnv*, jobject, jclass, jmethodID, const jvalue*);
		using java_CallNonvirtualIntMethodA = jint(__stdcall*)(JNIEnv*, jobject, jclass, jmethodID, const jvalue*);
		using java_CallNonvirtualLongMethodA = jlong(__stdcall*)(JNIEnv*, jobject, jclass, jmethodID, const jvalue*);
		using java_CallNonvirtualFloatMethodA = jfloat(__stdcall*)(JNIEnv*, jobject, jclass, jmethodID, const jvalue*);
		using java_CallNonvirtualDoubleMethodA = jdouble(__stdcall*)(JNIEnv*, jobject, jclass, jmethodID, const jvalue*);
		using java_CallNonvirtualVoidMethodA = void(__stdcall*)(JNIEnv*, jobject, jclass, jmethodID, const jvalue*);
		using java_GetFieldID = jfieldID(__stdcall*)(JNIEnv*, jclass, const char*, const char*);
		using java_GetObjectField = jobject(__stdcall*)(JNIEnv*, jobject, jfieldID);
		using java_GetBooleanField = jboolean(__stdcall*)(JNIEnv*, jobject, jfieldID);
		using java_GetByteField = jbyte(__stdcall*)(JNIEnv*, jobject, jfieldID);
		using java_GetCharField = jchar(__stdcall*)(JNIEnv*, jobject, jfieldID);
		using java_GetShortField = jshort(__stdcall*)(JNIEnv*, jobject, jfieldID);
		using java_GetIntField = jint(__stdcall*)(JNIEnv*, jobject, jfieldID);
		using java_GetLongField = jlong(__stdcall*)(JNIEnv*, jobject, jfieldID);
		using java_GetFloatField = jfloat(__stdcall*)(JNIEnv*, jobject, jfieldID);
		using java_GetDoubleField = jdouble(__stdcall*)(JNIEnv*, jobject, jfieldID);
		using java_SetObjectField = void(__stdcall*)(JNIEnv*, jobject, jfieldID, jobject);
		using java_SetBooleanField = void(__stdcall*)(JNIEnv*, jobject, jfieldID, jboolean);
		using java_SetByteField = void(__stdcall*)(JNIEnv*, jobject, jfieldID, jbyte);
		using java_SetCharField = void(__stdcall*)(JNIEnv*, jobject, jfieldID, jchar);
		using java_SetShortField = void(__stdcall*)(JNIEnv*, jobject, jfieldID, jshort);
		using java_SetIntField = void(__stdcall*)(JNIEnv*, jobject, jfieldID, jint);
		using java_SetLongField = void(__stdcall*)(JNIEnv*, jobject, jfieldID, jlong);
		using java_SetFloatField = void(__stdcall*)(JNIEnv*, jobject, jfieldID, jfloat);
		using java_SetDoubleField = void(__stdcall*)(JNIEnv*, jobject, jfieldID, jdouble);
		using java_GetStaticMethodID = jmethodID(__stdcall*)(JNIEnv*, jclass, const char*, const char*);
		using java_CallStaticObjectMethodA = jobject(__stdcall*)(JNIEnv*, jclass, jmethodID, const jvalue*);
		using java_CallStaticBooleanMethodA = jboolean(__stdcall*)(JNIEnv*, jclass, jmethodID, const jvalue*);
		using java_CallStaticByteMethodA = jbyte(__stdcall*)(JNIEnv*, jclass, jmethodID, const jvalue*);
		using java_CallStaticCharMethodA = jchar(__stdcall*)(JNIEnv*, jclass, jmethodID, const jvalue*);
		using java_CallStaticShortMethodA = jshort(__stdcall*)(JNIEnv*, jclass, jmethodID, const jvalue*);
		using java_CallStaticIntMethodA = jint(__stdcall*)(JNIEnv*, jclass, jmethodID, const jvalue*);
		using java_CallStaticLongMethodA = jlong(__stdcall*)(JNIEnv*, jclass, jmethodID, const jvalue*);
		using java_CallStaticFloatMethodA = jfloat(__stdcall*)(JNIEnv*, jclass, jmethodID, const jvalue*);
		using java_CallStaticDoubleMethodA = jdouble(__stdcall*)(JNIEnv*, jclass, jmethodID, const jvalue*);
		using java_CallStaticVoidMethodA = void(__stdcall*)(JNIEnv*, jclass, jmethodID, const jvalue*);
		using java_GetStaticFieldID = jfieldID(__stdcall*)(JNIEnv*, jclass, const char*, const char*);
		using java_GetStaticObjectField = jobject(__stdcall*)(JNIEnv*, jclass, jfieldID);
		using java_GetStaticBooleanField = jboolean(__stdcall*)(JNIEnv*, jclass, jfieldID);
		using java_GetStaticByteField = jbyte(__stdcall*)(JNIEnv*, jclass, jfieldID);
		using java_GetStaticCharField = jchar(__stdcall*)(JNIEnv*, jclass, jfieldID);
		using java_GetStaticShortField = jshort(__stdcall*)(JNIEnv*, jclass, jfieldID);
		using java_GetStaticIntField = jint(__stdcall*)(JNIEnv*, jclass, jfieldID);
		using java_GetStaticLongField = jlong(__stdcall*)(JNIEnv*, jclass, jfieldID);
		using java_GetStaticFloatField = jfloat(__stdcall*)(JNIEnv*, jclass, jfieldID);
		using java_GetStaticDoubleField = jdouble(__stdcall*)(JNIEnv*, jclass, jfieldID);
		using java_SetStaticObjectField = void(__stdcall*)(JNIEnv*, jclass, jfieldID, jobject);
		using java_SetStaticBooleanField = void(__stdcall*)(JNIEnv*, jclass, jfieldID, jboolean);
		using java_SetStaticByteField = void(__stdcall*)(JNIEnv*, jclass, jfieldID, jbyte);
		using java_SetStaticCharField = void(__stdcall*)(JNIEnv*, jclass, jfieldID, jchar);
		using java_SetStaticShortField = void(__stdcall*)(JNIEnv*, jclass, jfieldID, jshort);
		using java_SetStaticIntField = void(__stdcall*)(JNIEnv*, jclass, jfieldID, jint);
		using java_SetStaticLongField = void(__stdcall*)(JNIEnv*, jclass, jfieldID, jlong);
		using java_SetStaticFloatField = void(__stdcall*)(JNIEnv*, jclass, jfieldID, jfloat);
		using java_SetStaticDoubleField = void(__stdcall*)(JNIEnv*, jclass, jfieldID, jdouble);
		using java_NewString = jstring(__stdcall*)(JNIEnv*, const jchar*, jsize);
		using java_GetStringLength = jsize(__stdcall*)(JNIEnv*, jstring);
		using java_GetStringChars = const jchar*(__stdcall*)(JNIEnv*, jstring, jboolean*);
		using java_ReleaseStringChars = void(__stdcall*)(JNIEnv*, jstring, const jchar*);
		using java_NewStringUTF = jstring(__stdcall*)(JNIEnv*, const char*);
		using java_GetStringUTFLength = jsize(__stdcall*)(JNIEnv*, jstring);
		using java_GetStringUTFChars = const char*(__stdcall*)(JNIEnv*, jstring, jboolean*);
		using java_ReleaseStringUTFChars = void(__stdcall*)(JNIEnv*, jstring, const char*);
		using java_GetArrayLength = jsize(__stdcall*)(JNIEnv*, jarray);
		using java_NewObjectArray = jobjectArray(__stdcall*)(JNIEnv*, jsize, jclass, jobject);
		using java_GetObjectArrayElement = jobject(__stdcall*)(JNIEnv*, jobjectArray, jsize);
		using java_SetObjectArrayElement = void(__stdcall*)(JNIEnv*, jobjectArray, jsize, jobject);
		using java_NewBooleanArray = jbooleanArray(__stdcall*)(JNIEnv*, jsize);
		using java_NewByteArray = jbyteArray(__stdcall*)(JNIEnv*, jsize);
		using java_NewCharArray = jcharArray(__stdcall*)(JNIEnv*, jsize);
		using java_NewShortArray = jshortArray(__stdcall*)(JNIEnv*, jsize);
		using java_NewIntArray = jintArray(__stdcall*)(JNIEnv*, jsize);
		using java_NewLongArray = jlongArray(__stdcall*)(JNIEnv*, jsize);
		using java_NewFloatArray = jfloatArray(__stdcall*)(JNIEnv*, jsize);
		using java_NewDoubleArray = jdoubleArray(__stdcall*)(JNIEnv*, jsize);
		using java_GetBooleanArrayElements = jboolean * (__stdcall*)(JNIEnv*, jbooleanArray, jboolean);
		using java_GetByteArrayElements = jbyte * (__stdcall*)(JNIEnv*, jbyteArray, jboolean);
		using java_GetCharArrayElements = jchar * (__stdcall*)(JNIEnv*, jcharArray, jboolean);
		using java_GetShortArrayElements = jshort * (__stdcall*)(JNIEnv*, jshortArray, jboolean);
		using java_GetIntArrayElements = jint * (__stdcall*)(JNIEnv*, jintArray, jboolean);
		using java_GetLongArrayElements = jlong * (__stdcall*)(JNIEnv*, jlongArray, jboolean);
		using java_GetFloatArrayElements = jfloat * (__stdcall*)(JNIEnv*, jfloatArray, jboolean);
		using java_GetDoubleArrayElements = jdouble * (__stdcall*)(JNIEnv*, jdoubleArray, jboolean);
		using java_ReleaseBooleanArrayElements = void(__stdcall*)(JNIEnv*, jbooleanArray, jboolean*, jint);
		using java_ReleaseByteArrayElements = void(__stdcall*)(JNIEnv*, jbyteArray, jbyte*, jint);
		using java_ReleaseCharArrayElements = void(__stdcall*)(JNIEnv*, jcharArray, jchar*, jint);
		using java_ReleaseShortArrayElements = void(__stdcall*)(JNIEnv*, jshortArray, jshort*, jint);
		using java_ReleaseIntArrayElements = void(__stdcall*)(JNIEnv*, jintArray, jint*, jint);
		using java_ReleaseLongArrayElements = void(__stdcall*)(JNIEnv*, jlongArray, jlong*, jint);
		using java_ReleaseFloatArrayElements = void(__stdcall*)(JNIEnv*, jfloatArray, jfloat*, jint);
		using java_ReleaseDoubleArrayElements = void(__stdcall*)(JNIEnv*, jdoubleArray, jdouble*, jint);
		using java_GetBooleanArrayRegion = void(__stdcall*)(JNIEnv*, jbooleanArray, jsize, jsize, jboolean*);
		using java_GetByteArrayRegion = void(__stdcall*)(JNIEnv*, jbyteArray, jsize, jsize, jbyte*);
		using java_GetCharArrayRegion = void(__stdcall*)(JNIEnv*, jcharArray, jsize, jsize, jchar*);
		using java_GetShortArrayRegion = void(__stdcall*)(JNIEnv*, jshortArray, jsize, jsize, jshort*);
		using java_GetIntArrayRegion = void(__stdcall*)(JNIEnv*, jintArray, jsize, jsize, jint*);
		using java_GetLongArrayRegion = void(__stdcall*)(JNIEnv*, jlongArray, jsize, jsize, jlong*);
		using java_GetFloatArrayRegion = void(__stdcall*)(JNIEnv*, jfloatArray, jsize, jsize, jfloat*);
		using java_GetDoubleArrayRegion = void(__stdcall*)(JNIEnv*, jdoubleArray, jsize, jsize, jdouble*);
		using java_SetBooleanArrayRegion = void(__stdcall*)(JNIEnv*, jbooleanArray, jsize, jsize, const jboolean*);
		using java_SetByteArrayRegion = void(__stdcall*)(JNIEnv*, jbyteArray, jsize, jsize, const jbyte*);
		using java_SetCharArrayRegion = void(__stdcall*)(JNIEnv*, jcharArray, jsize, jsize, const jchar*);
		using java_SetShortArrayRegion = void(__stdcall*)(JNIEnv*, jshortArray, jsize, jsize, const jshort*);
		using java_SetIntArrayRegion = void(__stdcall*)(JNIEnv*, jintArray, jsize, jsize, const jint*);
		using java_SetLongArrayRegion = void(__stdcall*)(JNIEnv*, jlongArray, jsize, jsize, const jlong*);
		using java_SetFloatArrayRegion = void(__stdcall*)(JNIEnv*, jfloatArray, jsize, jsize, const jfloat*);
		using java_SetDoubleArrayRegion = void(__stdcall*)(JNIEnv*, jdoubleArray, jsize, jsize, const jdouble*);
		using java_GetStringRegion = void(__stdcall*)(JNIEnv*, jstring, jsize, jsize, jchar*);
		using java_GetStringUTFRegion = void(__stdcall*)(JNIEnv*, jstring, jsize, jsize, char*);
		using java_GetPrimitiveArrayCritical = void * (__stdcall*)(JNIEnv*, jarray, jboolean*);
		using java_ReleasePrimitiveArrayCritical = void(__stdcall*)(JNIEnv*, jarray, void*, jint);
		using java_GetStringCritical = const jchar * (__stdcall*)(JNIEnv*, jstring, jboolean*);
		using java_ReleaseStringCritical = void(__stdcall*)(JNIEnv*, jstring, const jchar*);
		using java_ExceptionCheck = jboolean(__stdcall*)(JNIEnv*);
		using java_NewDirectByteBuffer = jobject(__stdcall*)(JNIEnv*, void*, jlong);
		using java_GetDirectBufferAddress = void * (__stdcall*)(JNIEnv*, jobject);
		using java_GetDirectBufferCapacity = jlong(__stdcall*)(JNIEnv*, jobject);
	}
}
